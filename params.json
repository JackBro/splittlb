{"name":"TLB Splitting with Intel vt-d and KVM ","tagline":"TLB Splitting with Intel vt-d and KVM ","body":"# TLB Split in KVM\r\nThis project adds TLB splitting functionality to KVM hypervisor, available with Linux kernel. It includes the following components:\r\n* Kernel patches and TLB split implementation for KVM\r\n* Test application\r\n* Monitor application  \r\n\r\n## Kernel patches and TLB split implementation for KVM\r\nKernel patches can be found in the root folder, they add calls to the functions, defined in tlbsplit.c, to several KVM files\r\nTo build a kernel with TLB split support\r\n1. Copy 2 files from arch/x86/kvm to the same folder in the kernel source tree\r\n2. Apply all patches that can be found in the root folder of the repository (kvm_host.h.patch kvm_main.c.patch  Makefile.patch mmu.c.patch mmu.h.patch vmx.c.patch). These patches were made against Ubuntu kernel 3.19.0 and might require some adjustments for other versions.\r\n3. Build the kernel using its build script\r\n## Test application\r\nTest application is created using Visual C++ 2012. To build it either import it to VC++ or use msbuild on its project file.  \r\nThe application uses minhook library from [here](https://github.com/TsudaKageyu/minhook) . It can run three different commands:\r\n* VMCallTest /once \r\nThis is the default command option, VMCallTest will alter its own code while protecting the page it is changing so that the value that can be read stays unchanged. It will then execute the modified code once and print two values: the value in the instruction body (that is changed) and the value that can be read from the same memory location (where the change is hidden by TLB Split).\r\n* VMCallTest /many <number>\r\nSimilar to /once but it will read the value multiple times. This can be used to track the number of page faults in the hypervisor log. In my observation it does not generate any additional page faults for multiple reads unless you have some print instructions between them. The print instruction will effectively flush the TLB because it makes a system call and accesses a lot of pages for this.\r\n* VMCallTest /hook\r\nThe application will hook IsDebuggerPresent function from Windows API and make it return 1. It will hide the patched code  under a split page. \r\n\r\n## Monitor application\r\nMonitor application can be used in the hypervisor linux command prompt to periodically poll for some statistics about split pages that are being accessed for reading. It prints data such as RIP, Guest virtual address and CR3 value for the instruction that initiated a page flip.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}